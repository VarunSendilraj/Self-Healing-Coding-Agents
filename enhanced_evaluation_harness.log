2025-05-22 22:34:46,914 - __main__ - INFO - --- Starting Enhanced Multi-Agent Task: [95mcomplex_algorithm_planning_test[0m ---
2025-05-22 22:34:46,914 - __main__ - INFO - Description: [96mImplement a function to find the longest common subsequence (LCS) of two strings. The function should return the length of the longest common subsequence. Use dynamic programming for optimal solution.[0m
2025-05-22 22:34:46,914 - __main__ - INFO - 🔧 SETTING INITIAL EXECUTOR PROMPT: You are an AI Python programmer. Output only the raw Python code....
2025-05-22 22:34:46,915 - __main__ - INFO - 
=== PHASE 1: Initial Planning and Validation for Task '[94mcomplex_algorithm_planning_test[0m' ===
2025-05-22 22:34:46,915 - __main__ - INFO - [95m  1. Planning:[0m
2025-05-22 22:34:48,331 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:34:56,504 - __main__ - INFO -     [92mPlanner Output:[0m
{'plan_steps': ['Think about strings', 'Maybe compare them in some way', 'Use some kind of table or something', 'Fill in the table with numbers probably', 'Find the biggest number there', "That's probably the answer"]}
2025-05-22 22:34:56,504 - __main__ - INFO - [95m  2. Plan Validation:[0m
2025-05-22 22:34:56,504 - self_healing_agents.classifiers.plan_validator - INFO - 📋 PLAN VALIDATION: Starting plan quality assessment...
2025-05-22 22:34:56,505 - self_healing_agents.classifiers.plan_validator - INFO - 📋 PLAN VALIDATION: Quality Score: 0.74
2025-05-22 22:34:56,505 - self_healing_agents.classifiers.plan_validator - INFO - 📋 PLAN VALIDATION: Valid: True
2025-05-22 22:34:56,505 - __main__ - INFO -     [96mPlan Quality Score:[0m 0.74
2025-05-22 22:34:56,505 - __main__ - INFO -     [92mPlan Valid:[0m True
2025-05-22 22:34:56,505 - __main__ - WARNING -     [93mPlan Warnings:[0m ["Missing recommended fields: ['requirements', 'approach']", "Plan may not address: ['function definition', 'output specification']", 'Plan steps are quite brief - may lack detail']
2025-05-22 22:34:56,505 - __main__ - INFO - 
=== PHASE 2: Execution and Initial Evaluation ===
2025-05-22 22:34:56,505 - __main__ - INFO - [95m  3. Execution:[0m
2025-05-22 22:34:56,836 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:35:06,569 - __main__ - INFO -     [92mExecutor Output (initial code):[0m
```python
def longest_common_subsequence(text1, text2):
    m = len(text1)
    n = len(text2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return dp[m][n]
```
2025-05-22 22:35:06,569 - __main__ - INFO - [95m  4. Initial Evaluation:[0m
2025-05-22 22:35:06,860 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:35:27,247 - __main__ - INFO -     [96mFull Initial Critique:[0m
{'status': 'FAILURE_LOGIC', 'score': 0.3429, 'execution_stdout': 'DEBUG: About to execute code:\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n...\n', 'execution_stderr': '', 'error_details': None, 'test_results': [{'name': 'test_basic_case', 'inputs': {'text1': 'abcde', 'text2': 'ace'}, 'expected_output_spec': 3, 'status': 'failed', 'actual_output': 'None', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_basic_case\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='abcde', text2='ace'\nDEBUG_TEST_SCRIPT: Expected output: 3\nDEBUG_TEST_SCRIPT: Exception during test execution: name 'max' is not defined\n__TEST_RESULT_START__\ntest_case_name=test_basic_case\ntest_passed=False\nactual_output=None\nexpected_output=3\nerror_occurred=True\nerror_message=name 'max' is not defined\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': "name 'max' is not defined"}, {'name': 'test_no_common_subsequence', 'inputs': {'text1': 'abc', 'text2': 'def'}, 'expected_output_spec': 0, 'status': 'failed', 'actual_output': 'None', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_no_common_subsequence\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='abc', text2='def'\nDEBUG_TEST_SCRIPT: Expected output: 0\nDEBUG_TEST_SCRIPT: Exception during test execution: name 'max' is not defined\n__TEST_RESULT_START__\ntest_case_name=test_no_common_subsequence\ntest_passed=False\nactual_output=None\nexpected_output=0\nerror_occurred=True\nerror_message=name 'max' is not defined\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': "name 'max' is not defined"}, {'name': 'test_identical_strings', 'inputs': {'text1': 'abc', 'text2': 'abc'}, 'expected_output_spec': 3, 'status': 'failed', 'actual_output': 'None', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_identical_strings\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='abc', text2='abc'\nDEBUG_TEST_SCRIPT: Expected output: 3\nDEBUG_TEST_SCRIPT: Exception during test execution: name 'max' is not defined\n__TEST_RESULT_START__\ntest_case_name=test_identical_strings\ntest_passed=False\nactual_output=None\nexpected_output=3\nerror_occurred=True\nerror_message=name 'max' is not defined\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': "name 'max' is not defined"}, {'name': 'test_one_empty_string', 'inputs': {'text1': '', 'text2': 'abc'}, 'expected_output_spec': 0, 'status': 'passed', 'actual_output': '0', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_one_empty_string\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='', text2='abc'\nDEBUG_TEST_SCRIPT: Expected output: 0\n__TEST_RESULT_START__\ntest_case_name=test_one_empty_string\ntest_passed=True\nactual_output=0\nexpected_output=0\nerror_occurred=False\nerror_message=\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': ''}, {'name': 'test_both_empty_strings', 'inputs': {'text1': '', 'text2': ''}, 'expected_output_spec': 0, 'status': 'passed', 'actual_output': '0', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_both_empty_strings\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='', text2=''\nDEBUG_TEST_SCRIPT: Expected output: 0\n__TEST_RESULT_START__\ntest_case_name=test_both_empty_strings\ntest_passed=True\nactual_output=0\nexpected_output=0\nerror_occurred=False\nerror_message=\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': ''}, {'name': 'test_subsequence_not_contiguous', 'inputs': {'text1': 'abc', 'text2': 'aebdc'}, 'expected_output_spec': 3, 'status': 'failed', 'actual_output': 'None', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_subsequence_not_contiguous\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='abc', text2='aebdc'\nDEBUG_TEST_SCRIPT: Expected output: 3\nDEBUG_TEST_SCRIPT: Exception during test execution: name 'max' is not defined\n__TEST_RESULT_START__\ntest_case_name=test_subsequence_not_contiguous\ntest_passed=False\nactual_output=None\nexpected_output=3\nerror_occurred=True\nerror_message=name 'max' is not defined\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': "name 'max' is not defined"}, {'name': 'test_longer_strings', 'inputs': {'text1': 'abcdefghij', 'text2': 'a1c1e1g1i1'}, 'expected_output_spec': 5, 'status': 'failed', 'actual_output': 'None', 'stdout': "DEBUG: About to execute code:\n# --- Start of Generated Code from Executor ---\ndef longest_common_subsequence(text1, text2):\n    m = len(text1)\n    n = len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in ran...\nDEBUG_TEST_SCRIPT: Executing test: test_longer_strings\nDEBUG_TEST_SCRIPT: Inputs prepared as: text1='abcdefghij', text2='a1c1e1g1i1'\nDEBUG_TEST_SCRIPT: Expected output: 5\nDEBUG_TEST_SCRIPT: Exception during test execution: name 'max' is not defined\n__TEST_RESULT_START__\ntest_case_name=test_longer_strings\ntest_passed=False\nactual_output=None\nexpected_output=5\nerror_occurred=True\nerror_message=name 'max' is not defined\ncomparison_error_message=\n__TEST_RESULT_END__\n", 'stderr': '', 'error_message': "name 'max' is not defined"}], 'generated_test_specifications': [{'test_case_name': 'test_basic_case', 'inputs': {'text1': 'abcde', 'text2': 'ace'}, 'expected_output': 3}, {'test_case_name': 'test_no_common_subsequence', 'inputs': {'text1': 'abc', 'text2': 'def'}, 'expected_output': 0}, {'test_case_name': 'test_identical_strings', 'inputs': {'text1': 'abc', 'text2': 'abc'}, 'expected_output': 3}, {'test_case_name': 'test_one_empty_string', 'inputs': {'text1': '', 'text2': 'abc'}, 'expected_output': 0}, {'test_case_name': 'test_both_empty_strings', 'inputs': {'text1': '', 'text2': ''}, 'expected_output': 0}, {'test_case_name': 'test_subsequence_not_contiguous', 'inputs': {'text1': 'abc', 'text2': 'aebdc'}, 'expected_output': 3}, {'test_case_name': 'test_longer_strings', 'inputs': {'text1': 'abcdefghij', 'text2': 'a1c1e1g1i1'}, 'expected_output': 5}], 'function_to_test': 'longest_common_subsequence', 'summary': "Code executed successfully, but 5/7 tests failed for function 'longest_common_subsequence'."}
2025-05-22 22:35:27,247 - __main__ - INFO -     [92mCritic Status:[0m FAILURE_LOGIC
2025-05-22 22:35:27,247 - __main__ - INFO -     [92mCritic Score:[0m 0.3429
2025-05-22 22:35:27,247 - __main__ - INFO - 
=== PHASE 3: Direct Fix Attempt ===
2025-05-22 22:35:27,248 - __main__ - INFO - [95m  Direct Fix Attempt:[0m
2025-05-22 22:35:27,544 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:35:37,724 - __main__ - INFO -     [92mDirect Fix Output:[0m
```python
def longest_common_subsequence(text1, text2):
    m = len(text1)
    n = len(text2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return dp[m][n]
```
2025-05-22 22:35:38,022 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:35:56,919 - __main__ - INFO -     [92mDirect Fix Status:[0m FAILURE_LOGIC
2025-05-22 22:35:56,919 - __main__ - INFO -     [92mDirect Fix Score:[0m 0.3429
2025-05-22 22:35:56,919 - __main__ - INFO - 
=== PHASE 4: Enhanced Multi-Agent Self-Healing ===
2025-05-22 22:35:56,920 - __main__ - INFO - 
----- Healing Iteration 1/3 -----
2025-05-22 22:35:56,920 - __main__ - INFO - [95m  1. Failure Classification:[0m
2025-05-22 22:35:56,920 - self_healing_agents.classifiers.failure_classifier - INFO - 🔍 FAILURE CLASSIFICATION: Starting failure analysis...
2025-05-22 22:35:56,921 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 FAILURE CLASSIFICATION: MIXED_FAILURE
2025-05-22 22:35:56,921 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 CONFIDENCE: 0.50
2025-05-22 22:35:56,921 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 RECOMMENDED TARGET: PLANNER
2025-05-22 22:35:56,922 - __main__ - INFO -     [96mFailure Type:[0m MIXED_FAILURE
2025-05-22 22:35:56,922 - __main__ - INFO -     [96mConfidence:[0m 0.50
2025-05-22 22:35:56,922 - __main__ - INFO -     [96mRecommended Target:[0m PLANNER
2025-05-22 22:35:56,922 - __main__ - INFO - [95m  2. Planner Healing:[0m
2025-05-22 22:35:56,922 - self_healing_agents.agents - INFO - 🔧 PLANNER SELF-HEALING: Generating improved plan...
2025-05-22 22:35:57,227 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:36:24,764 - self_healing_agents.agents - INFO - ✅ PLANNER SELF-HEALING: Generated improved plan
2025-05-22 22:36:24,764 - __main__ - INFO -     [92mImproved Plan:[0m
{'steps': [{'step': 1, 'description': 'Understand the problem requirements: We need to find the length of the longest common subsequence (LCS) between two input strings. A subsequence is a sequence that appears in the same relative order but not necessarily contiguous.'}, {'step': 2, 'description': 'Initialize a 2D DP (Dynamic Programming) table with dimensions (m+1) x (n+1), where m and n are lengths of the two strings respectively. This table will store the LCS lengths for all subproblems.'}, {'step': 3, 'description': 'Set all cells in the first row and first column to 0, representing the base case where one of the strings is empty.'}, {'step': 4, 'description': 'Iterate through each character of both strings (i for string1, j for string2):', 'substeps': ['If characters match (string1[i-1] == string2[j-1]), set DP[i][j] = DP[i-1][j-1] + 1', "If characters don't match, set DP[i][j] = max(DP[i-1][j], DP[i][j-1])"]}, {'step': 5, 'description': 'After filling the DP table completely, the value at DP[m][n] will contain the length of the LCS.'}, {'step': 6, 'description': 'Return DP[m][n] as the result.'}], 'requirements': ['Python 3.x', 'No external libraries needed'], 'approach': "We'll use dynamic programming to solve this problem optimally. The approach involves building a solution from smaller subproblems (the LCS of string prefixes) and storing these solutions in a table to avoid recomputation. This gives us O(m*n) time complexity with O(m*n) space complexity.", 'improvements_made': ['Added clear problem understanding step', 'Specified exact DP table initialization', 'Detailed the base case handling', 'Provided concrete filling rules for the DP table', 'Added explicit return value specification', 'Included space/time complexity analysis', 'Added implementation requirements', 'Removed vague language from original plan']}
2025-05-22 22:36:24,765 - __main__ - INFO - [95m  3. Re-execution with Improved Plan:[0m
2025-05-22 22:36:25,062 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:36:37,211 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:36:55,203 - __main__ - INFO -     [92mImproved Status:[0m FAILURE_LOGIC
2025-05-22 22:36:55,204 - __main__ - INFO -     [92mImproved Score:[0m 0.3429
2025-05-22 22:36:55,204 - __main__ - INFO - 
----- Healing Iteration 2/3 -----
2025-05-22 22:36:55,204 - __main__ - INFO - [95m  1. Failure Classification:[0m
2025-05-22 22:36:55,204 - self_healing_agents.classifiers.failure_classifier - INFO - 🔍 FAILURE CLASSIFICATION: Starting failure analysis...
2025-05-22 22:36:55,205 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 FAILURE CLASSIFICATION: EXECUTION_FAILURE
2025-05-22 22:36:55,205 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 CONFIDENCE: 1.00
2025-05-22 22:36:55,205 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 RECOMMENDED TARGET: EXECUTOR
2025-05-22 22:36:55,205 - __main__ - INFO -     [96mFailure Type:[0m EXECUTION_FAILURE
2025-05-22 22:36:55,205 - __main__ - INFO -     [96mConfidence:[0m 1.00
2025-05-22 22:36:55,205 - __main__ - INFO -     [96mRecommended Target:[0m EXECUTOR
2025-05-22 22:36:55,206 - __main__ - INFO - [95m  2. Executor Healing:[0m
2025-05-22 22:36:55,206 - self_healing_agents.agents - INFO - 🔧 EXECUTOR SELF-HEALING: Generating improved code...
2025-05-22 22:36:55,520 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:37:05,742 - self_healing_agents.agents - INFO - ✅ EXECUTOR SELF-HEALING: Generated improved code
2025-05-22 22:37:05,742 - __main__ - INFO -     [92mImproved Code:[0m
```python
def longest_common_subsequence(text1, text2):
    m = len(text1)
    n = len(text2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return dp[m][n]
```
2025-05-22 22:37:06,041 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:37:23,514 - __main__ - INFO -     [92mImproved Status:[0m FAILURE_LOGIC
2025-05-22 22:37:23,515 - __main__ - INFO -     [92mImproved Score:[0m 0.3429
2025-05-22 22:37:23,515 - __main__ - INFO - 
----- Healing Iteration 3/3 -----
2025-05-22 22:37:23,515 - __main__ - INFO - [95m  1. Failure Classification:[0m
2025-05-22 22:37:23,515 - self_healing_agents.classifiers.failure_classifier - INFO - 🔍 FAILURE CLASSIFICATION: Starting failure analysis...
2025-05-22 22:37:23,516 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 FAILURE CLASSIFICATION: EXECUTION_FAILURE
2025-05-22 22:37:23,516 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 CONFIDENCE: 1.00
2025-05-22 22:37:23,516 - self_healing_agents.classifiers.failure_classifier - INFO - 🎯 RECOMMENDED TARGET: EXECUTOR
2025-05-22 22:37:23,516 - __main__ - INFO -     [96mFailure Type:[0m EXECUTION_FAILURE
2025-05-22 22:37:23,516 - __main__ - INFO -     [96mConfidence:[0m 1.00
2025-05-22 22:37:23,517 - __main__ - INFO -     [96mRecommended Target:[0m EXECUTOR
2025-05-22 22:37:23,517 - __main__ - INFO - [95m  2. Executor Healing:[0m
2025-05-22 22:37:23,517 - self_healing_agents.agents - INFO - 🔧 EXECUTOR SELF-HEALING: Generating improved code...
2025-05-22 22:37:24,359 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:37:37,031 - self_healing_agents.agents - INFO - ✅ EXECUTOR SELF-HEALING: Generated improved code
2025-05-22 22:37:37,032 - __main__ - INFO -     [92mImproved Code:[0m
```python
def longest_common_subsequence(text1, text2):
    len1 = len(text1)
    len2 = len(text2)
    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]
    
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return dp[len1][len2]
```
2025-05-22 22:37:37,356 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-22 22:37:56,043 - __main__ - INFO -     [92mImproved Status:[0m FAILURE_LOGIC
2025-05-22 22:37:56,043 - __main__ - INFO -     [92mImproved Score:[0m 0.3429
2025-05-22 22:37:56,044 - __main__ - INFO - 
================================================================================
2025-05-22 22:37:56,044 - __main__ - INFO - ENHANCED MULTI-AGENT RESULTS:
2025-05-22 22:37:56,044 - __main__ - INFO - ================================================================================
2025-05-22 22:37:56,056 - __main__ - INFO - Status: COMPLETED_MAX_HEALING_ITERATIONS
2025-05-22 22:37:56,056 - __main__ - INFO - Best Source: INITIAL
2025-05-22 22:37:56,056 - __main__ - INFO - Best Score: 0.34
2025-05-22 22:37:56,056 - __main__ - INFO - Total Healing Iterations: 3
2025-05-22 22:37:56,056 - __main__ - INFO - Planner Healings: 1
2025-05-22 22:37:56,057 - __main__ - INFO - Executor Healings: 2
2025-05-22 22:37:56,057 - __main__ - INFO - Direct Fix Attempts: 1
