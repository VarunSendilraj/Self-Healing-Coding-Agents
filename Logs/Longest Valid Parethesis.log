2025-05-16 21:45:34,765 - __main__ - INFO - LLMService initialized for provider: deepseek, model: deepseek-chat
2025-05-16 21:45:34,766 - __main__ - INFO - Attempting a simple test LLM call to verify setup...
2025-05-16 21:45:35,113 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:45:39,088 - __main__ - INFO - Test LLM call successful. Response snippet: Hello! ðŸ˜Š How can I assist you today?...
2025-05-16 21:45:40,467 - __main__ - INFO - Preparing interactive task: interactive_task_givenastringcontainingjust_214540
2025-05-16 21:45:40,467 - __main__ - INFO - Task Description: Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\nExample 1:\nInput: s = "(()"\nOutput: 2\nExplanation: The longest valid parentheses substring is "()".\n\nExample 2:\nInput: s = ")()())"\nOutput: 4\nExplanation: The longest valid parentheses substring is "()()".\n\nExample 3:\nInput: s = ""\nOutput: 0
2025-05-16 21:45:40,468 - __main__ - INFO - Initial Executor Prompt: You are an AI Python programmer. Output only the raw Python code.
2025-05-16 21:45:40,468 - __main__ - INFO - --- Starting Task: [95minteractive_task_givenastringcontainingjust_214540[0m ---
2025-05-16 21:45:40,468 - __main__ - INFO - Description: [96mGiven a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\n\nExample 1:\nInput: s = "(()"\nOutput: 2\nExplanation: The longest valid parentheses substring is "()".\n\nExample 2:\nInput: s = ")()())"\nOutput: 4\nExplanation: The longest valid parentheses substring is "()()".\n\nExample 3:\nInput: s = ""\nOutput: 0[0m
2025-05-16 21:45:40,468 - __main__ - INFO - [Harness] Task '[94minteractive_task_givenastringcontainingjust_214540[0m', Main Loop Iteration: [1m1[0m/3
2025-05-16 21:45:40,468 - __main__ - INFO - [95m  1. Planner Agent:[0m
2025-05-16 21:45:40,773 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:45:49,710 - __main__ - INFO -     [92mPlanner Output:[0m {'plan_steps': ['Initialize a stack to keep track of indices of parentheses.', 'Push -1 onto the stack as a base for calculating lengths.', 'Iterate through each character in the string.', "For each opening parenthesis '(', push its index onto the stack.", "For each closing parenthesis ')', pop the top element from the stack.", 'If the stack becomes empty after popping, push the current index onto the stack.', 'If the stack is not empty, calculate the length of the current valid substring by subtracting the top element of the stack from the current index.', 'Keep track of the maximum length encountered during the iteration.', 'Return the maximum length as the result.']}
2025-05-16 21:45:49,710 - __main__ - INFO - [95m  2. Executor Agent:[0m
2025-05-16 21:45:49,710 - __main__ - INFO -     [96mUsing Executor Prompt:[0m You are an AI Python programmer. Output only the raw Python code....
2025-05-16 21:45:50,272 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:45:56,849 - __main__ - INFO -     [92mGenerated Code:[0m
```python
def longestValidParentheses(s):
    stack = [-1]
    max_len = 0
    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)
            else:
                max_len = max(max_len, i - stack[-1])
    return max_len
```
2025-05-16 21:45:56,849 - __main__ - INFO - [95m  3. Critic Agent:[0m
2025-05-16 21:45:57,173 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:05,892 - __main__ - INFO -     [92mCritic Report:[0m Status: [93mFAILURE_LOGIC[0m, Score: [1m0.2[0m, Summary: Code executed successfully, but 3/3 tests failed for function 'longestValidParentheses'.
2025-05-16 21:46:05,893 - __main__ - INFO - [95m  4. Evaluation & Self-Healing Decision:[0m
2025-05-16 21:46:05,893 - __main__ - WARNING - [93m    Task '[91minteractive_task_givenastringcontainingjust_214540[0m' FAILED (score 0.2) in iteration 1. Critic: FAILURE_LOGIC[0m
2025-05-16 21:46:05,893 - __main__ - INFO - [96m    Triggering Prompt Modifier for task 'interactive_task_givenastringcontainingjust_214540'.[0m
2025-05-16 21:46:05,893 - __main__ - INFO -       Instantiating PromptModifier for this task.
2025-05-16 21:46:06,196 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:18,262 - __main__ - INFO -     [Harness Callback] Evaluating candidate prompt via Executor & Critic: "'''
You are an expert Python programmer specializing in algorithmic pr..."
2025-05-16 21:46:18,262 - __main__ - INFO -       [Harness Callback] Running Executor with candidate prompt.
2025-05-16 21:46:18,574 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:30,055 - __main__ - INFO -       [Harness Callback] Executor generated code for candidate.
2025-05-16 21:46:30,055 - __main__ - INFO -       [Harness Callback] Running Critic on new code.
2025-05-16 21:46:30,350 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:36,895 - __main__ - INFO - [96m    Executor prompt updated by PromptModifier: '''
You are an expert Python programmer specializing in algorithmic problem solving. Generate comple...[0m
2025-05-16 21:46:36,895 - __main__ - INFO - ----------------------------------------------------------------------
2025-05-16 21:46:36,895 - __main__ - INFO - [Harness] Task '[94minteractive_task_givenastringcontainingjust_214540[0m', Main Loop Iteration: [1m2[0m/3
2025-05-16 21:46:36,896 - __main__ - INFO - [95m  1. Planner Agent:[0m
2025-05-16 21:46:37,190 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:46,986 - __main__ - INFO -     [92mPlanner Output:[0m {'plan_steps': ['Initialize a stack to keep track of indices of parentheses.', 'Push -1 onto the stack as a base for calculating lengths.', 'Iterate through each character in the string.', "If the character is '(', push its index onto the stack.", "If the character is ')', pop from the stack.", 'If the stack becomes empty after popping, push the current index onto the stack.', 'If the stack is not empty, calculate the length of the current valid substring.', 'Keep track of the maximum length encountered during the iteration.', 'Return the maximum length after processing all characters.']}
2025-05-16 21:46:46,987 - __main__ - INFO - [95m  2. Executor Agent:[0m
2025-05-16 21:46:46,987 - __main__ - INFO -     [96mUsing Executor Prompt:[0m '''
You are an expert Python programmer specializing in algorithmic problem solving. Generate comple...
2025-05-16 21:46:47,277 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:46:58,970 - __main__ - INFO -     [92mGenerated Code:[0m
```python
def longest_valid_parentheses(s: str) -> int:
    """
    Finds the length of the longest valid (well-formed) parentheses substring in the given string.

    Args:
        s: A string containing only '(' and ')' characters.

    Returns:
        The length of the longest valid parentheses substring.

    Examples:
        >>> longest_valid_parentheses("(()")
        2
        >>> longest_valid_parentheses(")()())")
        4
        >>> longest_valid_parentheses("")
        0
    """
    if not s:
        return 0

    max_len = 0
    stack = [-1]  # Initialize stack with base index for valid substring calculation

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)  # Push current index as new base
            else:
                current_len = i - stack[-1]
                if current_len > max_len:
                    max_len = current_len

    return max_len
```
2025-05-16 21:46:58,970 - __main__ - INFO - [95m  3. Critic Agent:[0m
2025-05-16 21:46:59,316 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:47:08,139 - __main__ - INFO -     [92mCritic Report:[0m Status: [93mFAILURE_LOGIC[0m, Score: [1m0.2[0m, Summary: Code executed successfully, but 2/2 tests failed for function 'longest_valid_parentheses'.
2025-05-16 21:47:08,140 - __main__ - INFO - [95m  4. Evaluation & Self-Healing Decision:[0m
2025-05-16 21:47:08,140 - __main__ - WARNING - [93m    Task '[91minteractive_task_givenastringcontainingjust_214540[0m' FAILED (score 0.2) in iteration 2. Critic: FAILURE_LOGIC[0m
2025-05-16 21:47:08,140 - __main__ - INFO - [96m    Triggering Prompt Modifier for task 'interactive_task_givenastringcontainingjust_214540'.[0m
2025-05-16 21:47:08,465 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:47:33,007 - __main__ - INFO -     [Harness Callback] Evaluating candidate prompt via Executor & Critic: "'''
You are an expert Python programmer specializing in algorithmic pr..."
2025-05-16 21:47:33,007 - __main__ - INFO -       [Harness Callback] Running Executor with candidate prompt.
2025-05-16 21:47:33,330 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:47:46,454 - __main__ - INFO -       [Harness Callback] Executor generated code for candidate.
2025-05-16 21:47:46,455 - __main__ - INFO -       [Harness Callback] Running Critic on new code.
2025-05-16 21:47:46,841 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:47:55,674 - __main__ - WARNING - [93m    PromptModifier returned the same prompt. No change to Executor prompt.[0m
2025-05-16 21:47:55,674 - __main__ - INFO - ----------------------------------------------------------------------
2025-05-16 21:47:55,674 - __main__ - INFO - [Harness] Task '[94minteractive_task_givenastringcontainingjust_214540[0m', Main Loop Iteration: [1m3[0m/3
2025-05-16 21:47:55,675 - __main__ - INFO - [95m  1. Planner Agent:[0m
2025-05-16 21:47:55,977 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:48:05,407 - __main__ - INFO -     [92mPlanner Output:[0m {'plan_steps': ['Initialize a stack to keep track of indices of parentheses.', 'Push -1 onto the stack as a base for calculating lengths.', 'Iterate through each character in the string.', "For each '(', push its index onto the stack.", "For each ')', pop the top element from the stack.", 'If the stack becomes empty after popping, push the current index onto the stack.', 'If the stack is not empty, calculate the length of the current valid substring by subtracting the top element of the stack from the current index.', 'Keep track of the maximum length encountered during the iteration.', 'Return the maximum length as the result.']}
2025-05-16 21:48:05,407 - __main__ - INFO - [95m  2. Executor Agent:[0m
2025-05-16 21:48:05,407 - __main__ - INFO -     [96mUsing Executor Prompt:[0m '''
You are an expert Python programmer specializing in algorithmic problem solving. Generate comple...
2025-05-16 21:48:05,710 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:48:18,274 - __main__ - INFO -     [92mGenerated Code:[0m
```python
def longest_valid_parentheses(s: str) -> int:
    """
    Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

    Parameters:
    s (str): Input string consisting of '(' and ')' characters.

    Returns:
    int: Length of the longest valid parentheses substring.

    Examples:
    >>> longest_valid_parentheses("(()")
    2
    >>> longest_valid_parentheses(")()())")
    4
    >>> longest_valid_parentheses("")
    0
    """
    if not s:
        return 0

    max_length = 0
    stack = [-1]  # Initialize stack with base index for valid substring calculation

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)
            else:
                current_length = i - stack[-1]
                if current_length > max_length:
                    max_length = current_length

    return max_length
```
2025-05-16 21:48:18,274 - __main__ - INFO - [95m  3. Critic Agent:[0m
2025-05-16 21:48:18,589 - httpx - INFO - HTTP Request: POST https://api.deepseek.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-05-16 21:48:25,763 - __main__ - INFO -     [92mCritic Report:[0m Status: [93mFAILURE_LOGIC[0m, Score: [1m0.2[0m, Summary: Code executed successfully, but 2/2 tests failed for function 'longest_valid_parentheses'.
2025-05-16 21:48:25,763 - __main__ - INFO - [95m  4. Evaluation & Self-Healing Decision:[0m
2025-05-16 21:48:25,764 - __main__ - WARNING - [93m    Task '[91minteractive_task_givenastringcontainingjust_214540[0m' FAILED (score 0.2) in iteration 3. Critic: FAILURE_LOGIC[0m
2025-05-16 21:48:25,764 - __main__ - ERROR - [91m    Task '[91minteractive_task_givenastringcontainingjust_214540[0m' FAILED after max iterations (3). Final Critic: FAILURE_LOGIC, Score: 0.2.[0m
2025-05-16 21:48:25,764 - __main__ - INFO - --- Finished Task: [95minteractive_task_givenastringcontainingjust_214540[0m --- Status: [91mFAILURE_MAX_ITERATIONS[0m, Score: [1m0.2[0m
2025-05-16 21:48:25,764 - __main__ - INFO - === Interactive Task Execution Finished ===
2025-05-16 21:48:25,768 - __main__ - INFO - Prompt evolution summary appended to evaluation_harness.log
ctive_task_givenastringcontainingjust_214540
Initial Executor Prompt: You are an AI Python programmer. Output only the raw Python code.
----------------------------------------------------------------------
Main Loop Iteration 1:
  Executor Prompt Used:
You are an AI Python programmer. Output only the raw Python code.
  Executor Generated Code (for above prompt):
```python
def longestValidParentheses(s):
    stack = [-1]
    max_len = 0
    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)
            else:
                max_len = max(max_len, i - stack[-1])
    return max_len
```
  Critic Score: 0.2, Status: FAILURE_LOGIC
  Prompt Modifier - Evolved Prompt Suggestion:
'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''
  Prompt Modifier - Evolution Details:
    Population before this healing iteration (prompts and scores):
      - Prompt (created iter 2): Score 0.450 | "'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''"
      - Prompt (created iter 0): Score 0.200 | "You are an AI Python programmer. Output only the raw Python code."
      - Prompt (created iter 0): Score 0.200 | "You are an AI Python programmer. Output only the raw Python code."
----------------------------------------------------------------------
Main Loop Iteration 2:
  Executor Prompt Used:
'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''
  Executor Generated Code (for above prompt):
```python
def longest_valid_parentheses(s: str) -> int:
    """
    Finds the length of the longest valid (well-formed) parentheses substring in the given string.

    Args:
        s: A string containing only '(' and ')' characters.

    Returns:
        The length of the longest valid parentheses substring.

    Examples:
        >>> longest_valid_parentheses("(()")
        2
        >>> longest_valid_parentheses(")()())")
        4
        >>> longest_valid_parentheses("")
        0
    """
    if not s:
        return 0

    max_len = 0
    stack = [-1]  # Initialize stack with base index for valid substring calculation

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)  # Push current index as new base
            else:
                current_len = i - stack[-1]
                if current_len > max_len:
                    max_len = current_len

    return max_len
```
  Critic Score: 0.2, Status: FAILURE_LOGIC
  Prompt Modifier - Evolved Prompt Suggestion:
'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''
  Prompt Modifier - Evolution Details:
    Population before this healing iteration (prompts and scores):
      - Prompt (created iter 2): Score 0.450 | "'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''"
      - Prompt (created iter 2): Score 0.367 | "'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that adheres to the following strict requirements:

1. **Imports and Dependencies**:
   - Begin with ALL necessary imports explicitly stated at the top
   - Never assume any built-in functions are available without importing
   - Include standard library imports before third-party ones

2. **Problem Analysis**:
   - Start with a clear understanding of the problem requirements
   - Break down the problem into logical components
   - Document your approach before writing code

3. **Code Structure**:
   - Implement solutions as self-contained functions with single responsibilities
   - Use helper functions for complex sub-tasks
   - Follow PEP 8 style guidelines strictly
   - Include type hints for all function signatures

4. **Documentation**:
   - Begin each function with a detailed docstring containing:
     * Purpose and functionality
     * Parameter descriptions with types
     * Return value description with type
     * Time and space complexity analysis
     * Example usage
   - Add inline comments for non-trivial logic blocks

5. **Input Handling**:
   - Validate all inputs immediately at function entry
   - Handle edge cases explicitly before main logic
   - Consider all possible invalid inputs (None, wrong types, empty values)
   - Document assumptions about input constraints

6. **Algorithm Design**:
   - Select optimal data structures for the problem
   - Implement the most efficient algorithm available
   - Consider both time and space complexity trade-offs
   - Prefer clarity over premature optimization

7. **Defensive Programming**:
   - Include appropriate error handling
   - Use assertions for internal invariants
   - Write tests for edge cases in the example usage
   - Ensure the function fails gracefully on invalid inputs

8. **Testing Considerations**:
   - The code should pass all specified test cases
   - Include example usages in docstrings that cover:
     * Typical cases
     * Edge cases
     * Error cases
   - Ensure examples match the expected function behavior

9. **Output Requirements**:
   - Generate only the raw Python code
   - No additional explanations or markdown
   - Code must be immediately executable in any standard Python environment
   - All dependencies must be explicitly imported

For parenthetical problems specifically:
- Consider stack-based approaches for matching pairs
- Handle unbalanced cases explicitly
- Account for all possible valid and invalid sequences
- Optimize for O(n) time complexity where possible
'''"
      - Prompt (created iter 1): Score 0.200 | "'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''"
----------------------------------------------------------------------
Main Loop Iteration 3:
  Executor Prompt Used:
'''
You are an expert Python programmer specializing in algorithmic problem solving. Generate complete, production-quality Python code that:

1. Begins with all necessary imports explicitly stated
2. Includes thorough input validation and edge case handling
3. Uses optimal data structures and algorithms for the problem
4. Contains clear, modular functions with single responsibilities
5. Documents time and space complexity in docstrings
6. Handles all expected and unexpected input scenarios gracefully
7. Follows PEP 8 style guidelines for readability
8. Includes internal comments explaining non-trivial logic
9. Prioritizes efficiency while maintaining correctness
10. Demonstrates defensive programming practices

For each function:
- Start with a detailed docstring explaining purpose, parameters, return values, and examples
- Validate all inputs before processing
- Explicitly handle edge cases first
- Use helper functions when appropriate for complex logic
- Include type hints for better code clarity
- Document any assumptions made

The code should be self-contained, robust, and ready for immediate execution in any standard Python environment. Output only the raw Python code with no additional explanations.
'''
  Executor Generated Code (for above prompt):
```python
def longest_valid_parentheses(s: str) -> int:
    """
    Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

    Parameters:
    s (str): Input string consisting of '(' and ')' characters.

    Returns:
    int: Length of the longest valid parentheses substring.

    Examples:
    >>> longest_valid_parentheses("(()")
    2
    >>> longest_valid_parentheses(")()())")
    4
    >>> longest_valid_parentheses("")
    0
    """
    if not s:
        return 0

    max_length = 0
    stack = [-1]  # Initialize stack with base index for valid substring calculation

    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        else:
            stack.pop()
            if not stack:
                stack.append(i)
            else:
                current_length = i - stack[-1]
                if current_length > max_length:
                    max_length = current_length

    return max_length
```
  Critic Score: 0.2, Status: FAILURE_LOGIC
----------------------------------------------------------------------
============================== END PROMPT EVOLUTION SUMMARY ==============================
